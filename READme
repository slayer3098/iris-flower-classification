# ðŸŒ¸ Iris Flower Classification

A simple **machine learning project** that classifies iris flowers into three species (**Setosa, Versicolor, Virginica**) using **Support Vector Machines (SVM)** and a **Streamlit web app** for interactive predictions.

---

## ðŸ“‚ Project Structure

Iris Flower Classification/
â”‚â”€â”€ app/
â”‚ â””â”€â”€ main.py # Streamlit app (UI for predictions)
â”‚
â”‚â”€â”€ models/
â”‚ â”œâ”€â”€ svm_model.pkl # Trained SVM model
â”‚ â””â”€â”€ scaler.pkl # StandardScaler for preprocessing
â”‚
â”‚â”€â”€ src/
â”‚ â”œâ”€â”€ train.py # Script to train and save model
â”‚ â””â”€â”€ predict.py # Script for quick CLI predictions
â”‚
â”‚â”€â”€ requirements.txt # Python dependencies
â”‚â”€â”€ README.md # Project documentation

## Create a virtual environment

python -m venv venv
source venv/bin/activate   # Mac/Linux
venv\Scripts\activate      # Windows

## Install dependencies

pip install -r requirements.txt

## Train the model

python src/train.py
This will generate svm_model.pkl and scaler.pkl inside models/

## Run Streamlit App (UI)

1. streamlit run app/main.py

## ðŸ“Š Dataset

This project uses the famous Iris dataset
, containing 150 samples with 4 features:

Sepal length (cm)
Sepal width (cm)
Petal length (cm)
Petal width (cm)

## Target species:

0 â†’ Setosa
1 â†’ Versicolor
2 â†’ Virginica

## How It Works

1. Data Loading â€“ Iris dataset from sklearn.datasets.
2. Preprocessing â€“ Features are scaled with StandardScaler.
3. Model Training â€“ SVM classifier (SVC) is trained.
4. Evaluation â€“ Accuracy checked on a test split.
5. Deployment â€“ Saved model + scaler are loaded in Streamlit for live predictions.

##ðŸš€ Future Improvements

1. Train with larger datasets for robustness.
2. Experiment with Decision Trees, Random Forest, or Neural Networks.
3. Deploy app on Streamlit Cloud / Heroku / AWS.
4. Add reset button in UI for quick input clearing.
